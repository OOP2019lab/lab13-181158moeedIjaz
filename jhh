#include<iostream>
using namespace std;

template<typename T>
class Pair{
	T arr[2];

public:
	Pair(T a,T b){
		arr[0]=a;
		arr[1]=b;
	}
	T GetMax(){
		if(arr[0]>arr[1]){
			return arr[0];
		}else{
			return arr[1];
		}
	}
	T GetMin();
	friend ostream& operator<<(ostream& out,Pair& d){
		cout<<endl<<d.arr[0]<<" "<<d.arr[1]<<endl;
		return out;
	}
};

template<typename T>
T Pair<T>::GetMin(){
	if(arr[0]<arr[1]){
		return arr[0];
	}else{
		return arr[1];
	}
}

int main () 
{
  Pair <double> myobject (1.012, 1.01234);
	cout<<myobject.GetMax()<<endl;
  cout<<myobject.GetMin()<<endl;
	cout<<myobject<<endl; // << operator in pairs should be overloaded (inline)
	system("pause");
  return 0;
}
